load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@io_bazel_rules_docker//container:container.bzl", "container_push")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")

go_library(
    name = "go_default_library",
    srcs = [
        "grpc_utils.go",
        "main.go",
        "mavlink.go",
        "sim.go",
        "udp.go",
        "utils.go",
        "websocket.go",
    ],
    importpath = "github.com/tritonuas/god/hub",
    visibility = ["//visibility:private"],
    deps = [
        "//go-mavlink/mavlink:go_default_library",
        "//hub/hub_def:go_default_library",
        "//hub/interop:go_default_library",
        "//hub/interopconn:go_default_library",
        "//hub/mission_edit:go_default_library",
        "//hub/path_plan:go_default_library",
        "@com_github_golang_protobuf//jsonpb:go_default_library",
        "@com_github_gorilla_websocket//:go_default_library",
        "@com_github_grpc_ecosystem_grpc_gateway//runtime:go_default_library",
        "@com_github_namsral_flag//:go_default_library",
        "@com_github_rs_cors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_x_net//context:go_default_library",
    ],
)

filegroup(
    name = "swagger-ui",
    srcs = glob([
        "third_party/swagger-ui/*.json",
        " third_party/swagger-ui/*.png",
        "third_party/swagger-ui/*.html",
        "third_party/swagger-ui/*.js",
        "third_party/swagger-ui/*.css",
    ]),
    visibility = ["//visibility:public"],
)

go_binary(
    name = "hub",
    data = [
        "//:missions",
        "//:paths",
        "//hub:swagger-ui",
    ],
    embed = [":go_default_library"],
    pure = "on",
    visibility = ["//visibility:public"],
)

go_image(
    name = "image",
    data = [
        "//:missions",
        "//:paths",
        "//hub:swagger-ui",
    ],
    embed = [":go_default_library"],
    pure = "on",
)

container_push(
    name = "publish",
    format = "Docker",
    image = "//hub:image",
    # Any of these components may have variables.
    registry = "index.docker.io",
    repository = "tritonuas/hub",

    # Trigger stamping.
    stamp = True,
    tag = "latest",
)
container_push(
    name = "publishloc",
    format = "Docker",
    image = "//hub:image",
    # Any of these components may have variables.
    registry = "localhost:5005",
    repository = "tritonuas/hub",

    # Trigger stamping.
    stamp = True,
    tag = "latest",
)

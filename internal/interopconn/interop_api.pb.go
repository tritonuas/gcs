// Descriptors for Interop API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: interop_api.proto

package auvsi_suas_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Type of the ODLC.
// Required.
type Odlc_Type int32

const (
	// Standard ODLCs take latitude, longitude, orientation, shape and
	// color, alphanumeric and color, and if processed autonomously.
	Odlc_STANDARD Odlc_Type = 1
	// Emergent takes latitude, longitude, description, and if process
	// autonomously.
	Odlc_EMERGENT Odlc_Type = 4
)

// Enum value maps for Odlc_Type.
var (
	Odlc_Type_name = map[int32]string{
		1: "STANDARD",
		4: "EMERGENT",
	}
	Odlc_Type_value = map[string]int32{
		"STANDARD": 1,
		"EMERGENT": 4,
	}
)

func (x Odlc_Type) Enum() *Odlc_Type {
	p := new(Odlc_Type)
	*p = x
	return p
}

func (x Odlc_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odlc_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_interop_api_proto_enumTypes[0].Descriptor()
}

func (Odlc_Type) Type() protoreflect.EnumType {
	return &file_interop_api_proto_enumTypes[0]
}

func (x Odlc_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Odlc_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Odlc_Type(num)
	return nil
}

// Deprecated: Use Odlc_Type.Descriptor instead.
func (Odlc_Type) EnumDescriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{8, 0}
}

// Orientation of the ODLC, for normal and off axis.
// Optional.
type Odlc_Orientation int32

const (
	Odlc_N  Odlc_Orientation = 1
	Odlc_NE Odlc_Orientation = 2
	Odlc_E  Odlc_Orientation = 3
	Odlc_SE Odlc_Orientation = 4
	Odlc_S  Odlc_Orientation = 5
	Odlc_SW Odlc_Orientation = 6
	Odlc_W  Odlc_Orientation = 7
	Odlc_NW Odlc_Orientation = 8
)

// Enum value maps for Odlc_Orientation.
var (
	Odlc_Orientation_name = map[int32]string{
		1: "N",
		2: "NE",
		3: "E",
		4: "SE",
		5: "S",
		6: "SW",
		7: "W",
		8: "NW",
	}
	Odlc_Orientation_value = map[string]int32{
		"N":  1,
		"NE": 2,
		"E":  3,
		"SE": 4,
		"S":  5,
		"SW": 6,
		"W":  7,
		"NW": 8,
	}
)

func (x Odlc_Orientation) Enum() *Odlc_Orientation {
	p := new(Odlc_Orientation)
	*p = x
	return p
}

func (x Odlc_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odlc_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_interop_api_proto_enumTypes[1].Descriptor()
}

func (Odlc_Orientation) Type() protoreflect.EnumType {
	return &file_interop_api_proto_enumTypes[1]
}

func (x Odlc_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Odlc_Orientation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Odlc_Orientation(num)
	return nil
}

// Deprecated: Use Odlc_Orientation.Descriptor instead.
func (Odlc_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{8, 1}
}

// Shape of the ODLC, for normal and off axis.
// Optional.
type Odlc_Shape int32

const (
	Odlc_CIRCLE         Odlc_Shape = 1
	Odlc_SEMICIRCLE     Odlc_Shape = 2
	Odlc_QUARTER_CIRCLE Odlc_Shape = 3
	Odlc_TRIANGLE       Odlc_Shape = 4
	Odlc_SQUARE         Odlc_Shape = 5
	Odlc_RECTANGLE      Odlc_Shape = 6
	Odlc_TRAPEZOID      Odlc_Shape = 7
	Odlc_PENTAGON       Odlc_Shape = 8
	Odlc_HEXAGON        Odlc_Shape = 9
	Odlc_HEPTAGON       Odlc_Shape = 10
	Odlc_OCTAGON        Odlc_Shape = 11
	Odlc_STAR           Odlc_Shape = 12
	Odlc_CROSS          Odlc_Shape = 13
)

// Enum value maps for Odlc_Shape.
var (
	Odlc_Shape_name = map[int32]string{
		1:  "CIRCLE",
		2:  "SEMICIRCLE",
		3:  "QUARTER_CIRCLE",
		4:  "TRIANGLE",
		5:  "SQUARE",
		6:  "RECTANGLE",
		7:  "TRAPEZOID",
		8:  "PENTAGON",
		9:  "HEXAGON",
		10: "HEPTAGON",
		11: "OCTAGON",
		12: "STAR",
		13: "CROSS",
	}
	Odlc_Shape_value = map[string]int32{
		"CIRCLE":         1,
		"SEMICIRCLE":     2,
		"QUARTER_CIRCLE": 3,
		"TRIANGLE":       4,
		"SQUARE":         5,
		"RECTANGLE":      6,
		"TRAPEZOID":      7,
		"PENTAGON":       8,
		"HEXAGON":        9,
		"HEPTAGON":       10,
		"OCTAGON":        11,
		"STAR":           12,
		"CROSS":          13,
	}
)

func (x Odlc_Shape) Enum() *Odlc_Shape {
	p := new(Odlc_Shape)
	*p = x
	return p
}

func (x Odlc_Shape) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odlc_Shape) Descriptor() protoreflect.EnumDescriptor {
	return file_interop_api_proto_enumTypes[2].Descriptor()
}

func (Odlc_Shape) Type() protoreflect.EnumType {
	return &file_interop_api_proto_enumTypes[2]
}

func (x Odlc_Shape) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Odlc_Shape) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Odlc_Shape(num)
	return nil
}

// Deprecated: Use Odlc_Shape.Descriptor instead.
func (Odlc_Shape) EnumDescriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{8, 2}
}

// Colors of the ODLC, for normal and off axis.
// Optional.
type Odlc_Color int32

const (
	Odlc_WHITE  Odlc_Color = 1
	Odlc_BLACK  Odlc_Color = 2
	Odlc_GRAY   Odlc_Color = 3
	Odlc_RED    Odlc_Color = 4
	Odlc_BLUE   Odlc_Color = 5
	Odlc_GREEN  Odlc_Color = 6
	Odlc_YELLOW Odlc_Color = 7
	Odlc_PURPLE Odlc_Color = 8
	Odlc_BROWN  Odlc_Color = 9
	Odlc_ORANGE Odlc_Color = 10
)

// Enum value maps for Odlc_Color.
var (
	Odlc_Color_name = map[int32]string{
		1:  "WHITE",
		2:  "BLACK",
		3:  "GRAY",
		4:  "RED",
		5:  "BLUE",
		6:  "GREEN",
		7:  "YELLOW",
		8:  "PURPLE",
		9:  "BROWN",
		10: "ORANGE",
	}
	Odlc_Color_value = map[string]int32{
		"WHITE":  1,
		"BLACK":  2,
		"GRAY":   3,
		"RED":    4,
		"BLUE":   5,
		"GREEN":  6,
		"YELLOW": 7,
		"PURPLE": 8,
		"BROWN":  9,
		"ORANGE": 10,
	}
)

func (x Odlc_Color) Enum() *Odlc_Color {
	p := new(Odlc_Color)
	*p = x
	return p
}

func (x Odlc_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odlc_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_interop_api_proto_enumTypes[3].Descriptor()
}

func (Odlc_Color) Type() protoreflect.EnumType {
	return &file_interop_api_proto_enumTypes[3]
}

func (x Odlc_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Odlc_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Odlc_Color(num)
	return nil
}

// Deprecated: Use Odlc_Color.Descriptor instead.
func (Odlc_Color) EnumDescriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{8, 3}
}

// Credentials used to login to interop.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username for login.
	// Required.
	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// Password for login.
	// Required.
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{0}
}

func (x *Credentials) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// Identifier for a team.
type TeamId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the team.
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Interop username for the team.
	Username *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// Name of the team.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// University the team represents.
	University *string `protobuf:"bytes,4,opt,name=university" json:"university,omitempty"`
}

func (x *TeamId) Reset() {
	*x = TeamId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamId) ProtoMessage() {}

func (x *TeamId) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamId.ProtoReflect.Descriptor instead.
func (*TeamId) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{1}
}

func (x *TeamId) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TeamId) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *TeamId) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamId) GetUniversity() string {
	if x != nil && x.University != nil {
		return *x.University
	}
	return ""
}

// Status of a team.
type TeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The team this status describes.
	Team *TeamId `protobuf:"bytes,1,opt,name=team" json:"team,omitempty"`
	// Whether the team is marked in air by admin.
	InAir *bool `protobuf:"varint,2,opt,name=in_air,json=inAir" json:"in_air,omitempty"`
	// Most recent telemetry position, if it exists.
	Telemetry *Telemetry `protobuf:"bytes,3,opt,name=telemetry" json:"telemetry,omitempty"`
	// ID of the telemetry.
	TelemetryId *int64 `protobuf:"varint,4,opt,name=telemetry_id,json=telemetryId" json:"telemetry_id,omitempty"`
	// Age of the telemetry (time since uploaded to interop).
	TelemetryAgeSec *float64 `protobuf:"fixed64,5,opt,name=telemetry_age_sec,json=telemetryAgeSec" json:"telemetry_age_sec,omitempty"`
	// Timestamp of the telemetry as an ISO string.
	TelemetryTimestamp *string `protobuf:"bytes,6,opt,name=telemetry_timestamp,json=telemetryTimestamp" json:"telemetry_timestamp,omitempty"`
}

func (x *TeamStatus) Reset() {
	*x = TeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatus) ProtoMessage() {}

func (x *TeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatus.ProtoReflect.Descriptor instead.
func (*TeamStatus) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{2}
}

func (x *TeamStatus) GetTeam() *TeamId {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamStatus) GetInAir() bool {
	if x != nil && x.InAir != nil {
		return *x.InAir
	}
	return false
}

func (x *TeamStatus) GetTelemetry() *Telemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *TeamStatus) GetTelemetryId() int64 {
	if x != nil && x.TelemetryId != nil {
		return *x.TelemetryId
	}
	return 0
}

func (x *TeamStatus) GetTelemetryAgeSec() float64 {
	if x != nil && x.TelemetryAgeSec != nil {
		return *x.TelemetryAgeSec
	}
	return 0
}

func (x *TeamStatus) GetTelemetryTimestamp() string {
	if x != nil && x.TelemetryTimestamp != nil {
		return *x.TelemetryTimestamp
	}
	return ""
}

// Details for a mission.
type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the mission.
	// Required.
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Lost comms position for RTH/RTL and flight termination.
	// Required.
	LostCommsPos *Position `protobuf:"bytes,2,opt,name=lost_comms_pos,json=lostCommsPos" json:"lost_comms_pos,omitempty"`
	// Valid areas to fly. A team is out of bounds if not contained within.
	// Required. At least one FlyZone must be provided.
	FlyZones []*FlyZone `protobuf:"bytes,3,rep,name=fly_zones,json=flyZones" json:"fly_zones,omitempty"`
	// Sequence of waypoints teams must fly.
	// Required. At least on Waypoint must be provided.
	Waypoints []*Position `protobuf:"bytes,4,rep,name=waypoints" json:"waypoints,omitempty"`
	// Search grid containing ODLCs. Positions define a closed polygon.
	// Required. Will form a polygon, so at least 3 points must be provided.
	SearchGridPoints []*Position `protobuf:"bytes,5,rep,name=search_grid_points,json=searchGridPoints" json:"search_grid_points,omitempty"`
	// Position of the off-axis ODLC.
	// Required.
	OffAxisOdlcPos *Position `protobuf:"bytes,6,opt,name=off_axis_odlc_pos,json=offAxisOdlcPos" json:"off_axis_odlc_pos,omitempty"`
	// Desired position of the generated map.
	// Required.
	MapCenterPos *Position `protobuf:"bytes,12,opt,name=map_center_pos,json=mapCenterPos" json:"map_center_pos,omitempty"`
	// Desired height of the generated map in feet.
	// Required.
	MapHeight *float64 `protobuf:"fixed64,13,opt,name=map_height,json=mapHeight" json:"map_height,omitempty"`
	// Last known position of the emergent ODLC.
	// Required.
	EmergentLastKnownPos *Position `protobuf:"bytes,7,opt,name=emergent_last_known_pos,json=emergentLastKnownPos" json:"emergent_last_known_pos,omitempty"`
	// Boundary for the air drop and UGV drive.
	// Required.
	AirDropBoundaryPoints []*Position `protobuf:"bytes,8,rep,name=air_drop_boundary_points,json=airDropBoundaryPoints" json:"air_drop_boundary_points,omitempty"`
	// Position of the air drop location.
	// Required.
	AirDropPos *Position `protobuf:"bytes,9,opt,name=air_drop_pos,json=airDropPos" json:"air_drop_pos,omitempty"`
	// Position the UGV must drive to.
	// Required.
	UgvDrivePos *Position `protobuf:"bytes,10,opt,name=ugv_drive_pos,json=ugvDrivePos" json:"ugv_drive_pos,omitempty"`
	// Stationary obstacles.
	// Required.
	StationaryObstacles []*StationaryObstacle `protobuf:"bytes,11,rep,name=stationary_obstacles,json=stationaryObstacles" json:"stationary_obstacles,omitempty"`
}

func (x *Mission) Reset() {
	*x = Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{3}
}

func (x *Mission) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Mission) GetLostCommsPos() *Position {
	if x != nil {
		return x.LostCommsPos
	}
	return nil
}

func (x *Mission) GetFlyZones() []*FlyZone {
	if x != nil {
		return x.FlyZones
	}
	return nil
}

func (x *Mission) GetWaypoints() []*Position {
	if x != nil {
		return x.Waypoints
	}
	return nil
}

func (x *Mission) GetSearchGridPoints() []*Position {
	if x != nil {
		return x.SearchGridPoints
	}
	return nil
}

func (x *Mission) GetOffAxisOdlcPos() *Position {
	if x != nil {
		return x.OffAxisOdlcPos
	}
	return nil
}

func (x *Mission) GetMapCenterPos() *Position {
	if x != nil {
		return x.MapCenterPos
	}
	return nil
}

func (x *Mission) GetMapHeight() float64 {
	if x != nil && x.MapHeight != nil {
		return *x.MapHeight
	}
	return 0
}

func (x *Mission) GetEmergentLastKnownPos() *Position {
	if x != nil {
		return x.EmergentLastKnownPos
	}
	return nil
}

func (x *Mission) GetAirDropBoundaryPoints() []*Position {
	if x != nil {
		return x.AirDropBoundaryPoints
	}
	return nil
}

func (x *Mission) GetAirDropPos() *Position {
	if x != nil {
		return x.AirDropPos
	}
	return nil
}

func (x *Mission) GetUgvDrivePos() *Position {
	if x != nil {
		return x.UgvDrivePos
	}
	return nil
}

func (x *Mission) GetStationaryObstacles() []*StationaryObstacle {
	if x != nil {
		return x.StationaryObstacles
	}
	return nil
}

// Valid area to fly. Defined by a polygon and two altitude bounds. A position
// is within the FlyZone if the position is within the polygon and within the
// altitude bounds. Teams must be within a FlyZone at all times.
type FlyZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum altitude above mean sea level (MSL) in feet.
	// Required. [-1500, 330000]
	AltitudeMin *float64 `protobuf:"fixed64,1,opt,name=altitude_min,json=altitudeMin" json:"altitude_min,omitempty"`
	// Maximum altitude above mean sea level (MSL) in feet.
	// Required. [-1500, 330000]
	AltitudeMax *float64 `protobuf:"fixed64,2,opt,name=altitude_max,json=altitudeMax" json:"altitude_max,omitempty"`
	// Boundary points which define a closed polygon.
	// Required. Will form a polygon, so at least 3 points must be provided.
	BoundaryPoints []*Position `protobuf:"bytes,3,rep,name=boundary_points,json=boundaryPoints" json:"boundary_points,omitempty"`
}

func (x *FlyZone) Reset() {
	*x = FlyZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlyZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlyZone) ProtoMessage() {}

func (x *FlyZone) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlyZone.ProtoReflect.Descriptor instead.
func (*FlyZone) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{4}
}

func (x *FlyZone) GetAltitudeMin() float64 {
	if x != nil && x.AltitudeMin != nil {
		return *x.AltitudeMin
	}
	return 0
}

func (x *FlyZone) GetAltitudeMax() float64 {
	if x != nil && x.AltitudeMax != nil {
		return *x.AltitudeMax
	}
	return 0
}

func (x *FlyZone) GetBoundaryPoints() []*Position {
	if x != nil {
		return x.BoundaryPoints
	}
	return nil
}

// Position of an entity.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude of GPS position in degrees.
	// Required. [-90, 90]
	Latitude *float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of GPS position in degrees.
	// Required. [-180, 180]
	Longitude *float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude above mean sea level (MSL) in feet.
	// Optional. [-1500, 330000]
	Altitude *float64 `protobuf:"fixed64,3,opt,name=altitude" json:"altitude,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Position) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Position) GetAltitude() float64 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

// UAS telemetry teams must upload.
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude of GPS position in degrees.
	// Required. [-90, 90]
	Latitude *float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of GPS position in degrees.
	// Required. [-180, 180]
	Longitude *float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude above mean sea level (MSL) in feet.
	// Required. [-1500, 330000]
	Altitude *float64 `protobuf:"fixed64,3,opt,name=altitude" json:"altitude,omitempty"`
	// Heading relative to true north in degrees.
	// Required. [0, 360]
	Heading *float64 `protobuf:"fixed64,4,opt,name=heading" json:"heading,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{6}
}

func (x *Telemetry) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Telemetry) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Telemetry) GetAltitude() float64 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *Telemetry) GetHeading() float64 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

// Stationary obstacle modeled as a cylinder.
type StationaryObstacle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude of GPS position in degrees.
	// Required. [-90, 90]
	Latitude *float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of GPS position in degrees.
	// Required. [-180, 180]
	Longitude *float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Radius of the obstacle cylinder in feet.
	// Required. [30, 300]
	Radius *float64 `protobuf:"fixed64,3,opt,name=radius" json:"radius,omitempty"`
	// Height of the obstacle cylinder above mean sea level (MSL) in feet.
	// Required. [-1500, 330000]
	Height *float64 `protobuf:"fixed64,4,opt,name=height" json:"height,omitempty"`
}

func (x *StationaryObstacle) Reset() {
	*x = StationaryObstacle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationaryObstacle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationaryObstacle) ProtoMessage() {}

func (x *StationaryObstacle) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationaryObstacle.ProtoReflect.Descriptor instead.
func (*StationaryObstacle) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{7}
}

func (x *StationaryObstacle) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *StationaryObstacle) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *StationaryObstacle) GetRadius() float64 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *StationaryObstacle) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

// Object detection, localization, and classification (ODLC).
type Odlc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the ODLC.
	// Set by the server on responses. Use to update ODLC after upload.
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Mission the ODLC submitted for.
	// Required.
	Mission *int32     `protobuf:"varint,2,opt,name=mission" json:"mission,omitempty"`
	Type    *Odlc_Type `protobuf:"varint,3,opt,name=type,enum=auvsi_suas.proto.Odlc_Type" json:"type,omitempty"`
	// Latitude of GPS position in degrees.
	// Optional. [-90, 90]
	Latitude *float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of GPS position in degrees.
	// Optional. [-180, 180]
	Longitude   *float64          `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	Orientation *Odlc_Orientation `protobuf:"varint,6,opt,name=orientation,enum=auvsi_suas.proto.Odlc_Orientation" json:"orientation,omitempty"`
	Shape       *Odlc_Shape       `protobuf:"varint,7,opt,name=shape,enum=auvsi_suas.proto.Odlc_Shape" json:"shape,omitempty"`
	// Alphanumeric of the ODLC, for normal and off axis.
	// Optional. [A-Z, 0-9]
	Alphanumeric      *string     `protobuf:"bytes,8,opt,name=alphanumeric" json:"alphanumeric,omitempty"`
	ShapeColor        *Odlc_Color `protobuf:"varint,9,opt,name=shape_color,json=shapeColor,enum=auvsi_suas.proto.Odlc_Color" json:"shape_color,omitempty"`
	AlphanumericColor *Odlc_Color `protobuf:"varint,10,opt,name=alphanumeric_color,json=alphanumericColor,enum=auvsi_suas.proto.Odlc_Color" json:"alphanumeric_color,omitempty"`
	// Description for emergent ODLCs.
	// Optional.
	Description *string `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	// Whether the ODLC was detected, localized, and classified autonomously.
	// Optional. Defaults to false.
	Autonomous *bool `protobuf:"varint,12,opt,name=autonomous" json:"autonomous,omitempty"`
}

func (x *Odlc) Reset() {
	*x = Odlc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interop_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Odlc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Odlc) ProtoMessage() {}

func (x *Odlc) ProtoReflect() protoreflect.Message {
	mi := &file_interop_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Odlc.ProtoReflect.Descriptor instead.
func (*Odlc) Descriptor() ([]byte, []int) {
	return file_interop_api_proto_rawDescGZIP(), []int{8}
}

func (x *Odlc) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Odlc) GetMission() int32 {
	if x != nil && x.Mission != nil {
		return *x.Mission
	}
	return 0
}

func (x *Odlc) GetType() Odlc_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Odlc_STANDARD
}

func (x *Odlc) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Odlc) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Odlc) GetOrientation() Odlc_Orientation {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return Odlc_N
}

func (x *Odlc) GetShape() Odlc_Shape {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return Odlc_CIRCLE
}

func (x *Odlc) GetAlphanumeric() string {
	if x != nil && x.Alphanumeric != nil {
		return *x.Alphanumeric
	}
	return ""
}

func (x *Odlc) GetShapeColor() Odlc_Color {
	if x != nil && x.ShapeColor != nil {
		return *x.ShapeColor
	}
	return Odlc_WHITE
}

func (x *Odlc) GetAlphanumericColor() Odlc_Color {
	if x != nil && x.AlphanumericColor != nil {
		return *x.AlphanumericColor
	}
	return Odlc_WHITE
}

func (x *Odlc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Odlc) GetAutonomous() bool {
	if x != nil && x.Autonomous != nil {
		return *x.Autonomous
	}
	return false
}

var File_interop_api_proto protoreflect.FileDescriptor

var file_interop_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x68, 0x0a, 0x06,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x41, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xbe, 0x06, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73,
	0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x73,
	0x50, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6c, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73,
	0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x08, 0x66, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x67, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6f, 0x64, 0x6c, 0x63,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76,
	0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x41, 0x78, 0x69, 0x73, 0x4f,
	0x64, 0x6c, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69,
	0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x61, 0x69,
	0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f,
	0x70, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75,
	0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x75, 0x67, 0x76, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x75, 0x67, 0x76, 0x44, 0x72, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x57, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75,
	0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x62, 0x73,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x46, 0x6c, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0x7b, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x7e, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x07, 0x0a,
	0x04, 0x4f, 0x64, 0x6c, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x64, 0x6c, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x6c, 0x63, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x6c, 0x63, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x64, 0x6c, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x76, 0x73, 0x69, 0x5f, 0x73, 0x75, 0x61, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x6c, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x11, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x49, 0x0a, 0x0b, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x0a, 0x01, 0x4e, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x53, 0x45, 0x10, 0x04, 0x12, 0x05, 0x0a, 0x01, 0x53, 0x10, 0x05, 0x12, 0x06,
	0x0a, 0x02, 0x53, 0x57, 0x10, 0x06, 0x12, 0x05, 0x0a, 0x01, 0x57, 0x10, 0x07, 0x12, 0x06, 0x0a,
	0x02, 0x4e, 0x57, 0x10, 0x08, 0x22, 0xba, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x45, 0x4d, 0x49, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51,
	0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43,
	0x54, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x50,
	0x45, 0x5a, 0x4f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x4e, 0x54, 0x41,
	0x47, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x58, 0x41, 0x47, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x45, 0x50, 0x54, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x43, 0x54, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x54, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x4f, 0x53, 0x53,
	0x10, 0x0d, 0x22, 0x74, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41, 0x59, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a,
}

var (
	file_interop_api_proto_rawDescOnce sync.Once
	file_interop_api_proto_rawDescData = file_interop_api_proto_rawDesc
)

func file_interop_api_proto_rawDescGZIP() []byte {
	file_interop_api_proto_rawDescOnce.Do(func() {
		file_interop_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_interop_api_proto_rawDescData)
	})
	return file_interop_api_proto_rawDescData
}

var file_interop_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_interop_api_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_interop_api_proto_goTypes = []interface{}{
	(Odlc_Type)(0),             // 0: auvsi_suas.proto.Odlc.Type
	(Odlc_Orientation)(0),      // 1: auvsi_suas.proto.Odlc.Orientation
	(Odlc_Shape)(0),            // 2: auvsi_suas.proto.Odlc.Shape
	(Odlc_Color)(0),            // 3: auvsi_suas.proto.Odlc.Color
	(*Credentials)(nil),        // 4: auvsi_suas.proto.Credentials
	(*TeamId)(nil),             // 5: auvsi_suas.proto.TeamId
	(*TeamStatus)(nil),         // 6: auvsi_suas.proto.TeamStatus
	(*Mission)(nil),            // 7: auvsi_suas.proto.Mission
	(*FlyZone)(nil),            // 8: auvsi_suas.proto.FlyZone
	(*Position)(nil),           // 9: auvsi_suas.proto.Position
	(*Telemetry)(nil),          // 10: auvsi_suas.proto.Telemetry
	(*StationaryObstacle)(nil), // 11: auvsi_suas.proto.StationaryObstacle
	(*Odlc)(nil),               // 12: auvsi_suas.proto.Odlc
}
var file_interop_api_proto_depIdxs = []int32{
	5,  // 0: auvsi_suas.proto.TeamStatus.team:type_name -> auvsi_suas.proto.TeamId
	10, // 1: auvsi_suas.proto.TeamStatus.telemetry:type_name -> auvsi_suas.proto.Telemetry
	9,  // 2: auvsi_suas.proto.Mission.lost_comms_pos:type_name -> auvsi_suas.proto.Position
	8,  // 3: auvsi_suas.proto.Mission.fly_zones:type_name -> auvsi_suas.proto.FlyZone
	9,  // 4: auvsi_suas.proto.Mission.waypoints:type_name -> auvsi_suas.proto.Position
	9,  // 5: auvsi_suas.proto.Mission.search_grid_points:type_name -> auvsi_suas.proto.Position
	9,  // 6: auvsi_suas.proto.Mission.off_axis_odlc_pos:type_name -> auvsi_suas.proto.Position
	9,  // 7: auvsi_suas.proto.Mission.map_center_pos:type_name -> auvsi_suas.proto.Position
	9,  // 8: auvsi_suas.proto.Mission.emergent_last_known_pos:type_name -> auvsi_suas.proto.Position
	9,  // 9: auvsi_suas.proto.Mission.air_drop_boundary_points:type_name -> auvsi_suas.proto.Position
	9,  // 10: auvsi_suas.proto.Mission.air_drop_pos:type_name -> auvsi_suas.proto.Position
	9,  // 11: auvsi_suas.proto.Mission.ugv_drive_pos:type_name -> auvsi_suas.proto.Position
	11, // 12: auvsi_suas.proto.Mission.stationary_obstacles:type_name -> auvsi_suas.proto.StationaryObstacle
	9,  // 13: auvsi_suas.proto.FlyZone.boundary_points:type_name -> auvsi_suas.proto.Position
	0,  // 14: auvsi_suas.proto.Odlc.type:type_name -> auvsi_suas.proto.Odlc.Type
	1,  // 15: auvsi_suas.proto.Odlc.orientation:type_name -> auvsi_suas.proto.Odlc.Orientation
	2,  // 16: auvsi_suas.proto.Odlc.shape:type_name -> auvsi_suas.proto.Odlc.Shape
	3,  // 17: auvsi_suas.proto.Odlc.shape_color:type_name -> auvsi_suas.proto.Odlc.Color
	3,  // 18: auvsi_suas.proto.Odlc.alphanumeric_color:type_name -> auvsi_suas.proto.Odlc.Color
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_interop_api_proto_init() }
func file_interop_api_proto_init() {
	if File_interop_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interop_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlyZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationaryObstacle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interop_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Odlc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interop_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_interop_api_proto_goTypes,
		DependencyIndexes: file_interop_api_proto_depIdxs,
		EnumInfos:         file_interop_api_proto_enumTypes,
		MessageInfos:      file_interop_api_proto_msgTypes,
	}.Build()
	File_interop_api_proto = out.File
	file_interop_api_proto_rawDesc = nil
	file_interop_api_proto_goTypes = nil
	file_interop_api_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interop/telemetry.proto

package interop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Telemetry struct {
	Latitude    float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude   float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
	AltitudeMsl float32 `protobuf:"fixed32,3,opt,name=altitude_msl,json=altitudeMsl" json:"altitude_msl,omitempty"`
	UasHeading  float32 `protobuf:"fixed32,4,opt,name=uas_heading,json=uasHeading" json:"uas_heading,omitempty"`
}

func (m *Telemetry) Reset()                    { *m = Telemetry{} }
func (m *Telemetry) String() string            { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()               {}
func (*Telemetry) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Telemetry) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Telemetry) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Telemetry) GetAltitudeMsl() float32 {
	if m != nil {
		return m.AltitudeMsl
	}
	return 0
}

func (m *Telemetry) GetUasHeading() float32 {
	if m != nil {
		return m.UasHeading
	}
	return 0
}

type GCSMessage struct {
	// Types that are valid to be assigned to GcsMessage:
	//	*GCSMessage_Telem
	//	*GCSMessage_MissionReport
	GcsMessage isGCSMessage_GcsMessage `protobuf_oneof:"gcs_message"`
}

func (m *GCSMessage) Reset()                    { *m = GCSMessage{} }
func (m *GCSMessage) String() string            { return proto.CompactTextString(m) }
func (*GCSMessage) ProtoMessage()               {}
func (*GCSMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type isGCSMessage_GcsMessage interface {
	isGCSMessage_GcsMessage()
}

type GCSMessage_Telem struct {
	Telem *Telemetry `protobuf:"bytes,1,opt,name=telem,oneof"`
}
type GCSMessage_MissionReport struct {
	MissionReport *MissionReportStatus `protobuf:"bytes,2,opt,name=mission_report,json=missionReport,oneof"`
}

func (*GCSMessage_Telem) isGCSMessage_GcsMessage()         {}
func (*GCSMessage_MissionReport) isGCSMessage_GcsMessage() {}

func (m *GCSMessage) GetGcsMessage() isGCSMessage_GcsMessage {
	if m != nil {
		return m.GcsMessage
	}
	return nil
}

func (m *GCSMessage) GetTelem() *Telemetry {
	if x, ok := m.GetGcsMessage().(*GCSMessage_Telem); ok {
		return x.Telem
	}
	return nil
}

func (m *GCSMessage) GetMissionReport() *MissionReportStatus {
	if x, ok := m.GetGcsMessage().(*GCSMessage_MissionReport); ok {
		return x.MissionReport
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GCSMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GCSMessage_OneofMarshaler, _GCSMessage_OneofUnmarshaler, _GCSMessage_OneofSizer, []interface{}{
		(*GCSMessage_Telem)(nil),
		(*GCSMessage_MissionReport)(nil),
	}
}

func _GCSMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GCSMessage)
	// gcs_message
	switch x := m.GcsMessage.(type) {
	case *GCSMessage_Telem:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Telem); err != nil {
			return err
		}
	case *GCSMessage_MissionReport:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MissionReport); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GCSMessage.GcsMessage has unexpected type %T", x)
	}
	return nil
}

func _GCSMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GCSMessage)
	switch tag {
	case 1: // gcs_message.telem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Telemetry)
		err := b.DecodeMessage(msg)
		m.GcsMessage = &GCSMessage_Telem{msg}
		return true, err
	case 2: // gcs_message.mission_report
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MissionReportStatus)
		err := b.DecodeMessage(msg)
		m.GcsMessage = &GCSMessage_MissionReport{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GCSMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GCSMessage)
	// gcs_message
	switch x := m.GcsMessage.(type) {
	case *GCSMessage_Telem:
		s := proto.Size(x.Telem)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GCSMessage_MissionReport:
		s := proto.Size(x.MissionReport)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Telemetry)(nil), "interop.Telemetry")
	proto.RegisterType((*GCSMessage)(nil), "interop.GCSMessage")
}

func init() { proto.RegisterFile("interop/telemetry.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x9b, 0xf2, 0xdb, 0x6b, 0xca, 0xe0, 0x85, 0xa8, 0x8a, 0x04, 0x74, 0x42, 0x0c, 0x41,
	0x2a, 0x6f, 0x00, 0x42, 0x64, 0xc9, 0x92, 0xb2, 0x47, 0x86, 0x5e, 0x05, 0x4b, 0x76, 0x1c, 0xf9,
	0x5e, 0x0f, 0x3c, 0x02, 0x0b, 0xcf, 0x8c, 0x64, 0x37, 0x81, 0x8e, 0x3e, 0xdf, 0x77, 0xa5, 0x73,
	0x0c, 0x57, 0xba, 0x67, 0xf4, 0x6e, 0x78, 0x60, 0x34, 0x68, 0x91, 0xfd, 0x57, 0x39, 0x78, 0xc7,
	0x4e, 0x9e, 0xed, 0xc1, 0xaa, 0x18, 0x0d, 0xab, 0x89, 0xb4, 0xeb, 0x5b, 0x8f, 0x83, 0xf3, 0x9c,
	0xb4, 0xf5, 0x77, 0x06, 0x8b, 0xb7, 0xf1, 0x54, 0xae, 0xe0, 0xdc, 0x28, 0xd6, 0x1c, 0x76, 0x98,
	0x67, 0x37, 0xd9, 0xdd, 0xbc, 0x99, 0xde, 0xb2, 0x80, 0x85, 0x71, 0x7d, 0x97, 0xe0, 0x3c, 0xc2,
	0xbf, 0x40, 0xde, 0xc2, 0x85, 0x32, 0xc9, 0x6c, 0x2d, 0x99, 0xfc, 0x28, 0x0a, 0x62, 0xcc, 0x6a,
	0x32, 0xf2, 0x1a, 0x44, 0x50, 0xd4, 0x7e, 0xa2, 0xda, 0xe9, 0xbe, 0xcb, 0x8f, 0xa3, 0x01, 0x41,
	0x51, 0x95, 0x92, 0xf5, 0x4f, 0x06, 0xf0, 0xfa, 0xbc, 0xad, 0x91, 0x48, 0x75, 0x28, 0xef, 0xe1,
	0x24, 0x8e, 0x8a, 0x4d, 0xc4, 0x46, 0x96, 0xfb, 0x21, 0xe5, 0xd4, 0xb7, 0x9a, 0x35, 0x49, 0x91,
	0x2f, 0x70, 0x79, 0x38, 0x2f, 0x36, 0x14, 0x9b, 0x62, 0x3a, 0xaa, 0x13, 0x6e, 0x22, 0xdd, 0xb2,
	0xe2, 0x40, 0xd5, 0xac, 0x59, 0xda, 0xff, 0xf1, 0xd3, 0x12, 0x44, 0xf7, 0x41, 0xad, 0x4d, 0x0d,
	0xde, 0x4f, 0xe3, 0x1f, 0x3d, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x77, 0x4d, 0x23, 0xa9, 0x65,
	0x01, 0x00, 0x00,
}

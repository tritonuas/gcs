// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interop/obstacles.proto

package interop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MovingObstacle struct {
	Latitude     float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude    float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
	AltitudeMsl  float32 `protobuf:"fixed32,3,opt,name=altitude_msl,json=altitudeMsl" json:"altitude_msl,omitempty"`
	SphereRadius float32 `protobuf:"fixed32,4,opt,name=sphere_radius,json=sphereRadius" json:"sphere_radius,omitempty"`
}

func (m *MovingObstacle) Reset()                    { *m = MovingObstacle{} }
func (m *MovingObstacle) String() string            { return proto.CompactTextString(m) }
func (*MovingObstacle) ProtoMessage()               {}
func (*MovingObstacle) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MovingObstacle) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *MovingObstacle) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *MovingObstacle) GetAltitudeMsl() float32 {
	if m != nil {
		return m.AltitudeMsl
	}
	return 0
}

func (m *MovingObstacle) GetSphereRadius() float32 {
	if m != nil {
		return m.SphereRadius
	}
	return 0
}

type StationaryObstacle struct {
	Latitude       float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude      float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
	CylinderHeight float32 `protobuf:"fixed32,3,opt,name=cylinder_height,json=cylinderHeight" json:"cylinder_height,omitempty"`
	CylinderRadius float32 `protobuf:"fixed32,4,opt,name=cylinder_radius,json=cylinderRadius" json:"cylinder_radius,omitempty"`
}

func (m *StationaryObstacle) Reset()                    { *m = StationaryObstacle{} }
func (m *StationaryObstacle) String() string            { return proto.CompactTextString(m) }
func (*StationaryObstacle) ProtoMessage()               {}
func (*StationaryObstacle) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *StationaryObstacle) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *StationaryObstacle) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *StationaryObstacle) GetCylinderHeight() float32 {
	if m != nil {
		return m.CylinderHeight
	}
	return 0
}

func (m *StationaryObstacle) GetCylinderRadius() float32 {
	if m != nil {
		return m.CylinderRadius
	}
	return 0
}

type Obstacles struct {
	MovingObstacles     []*MovingObstacle     `protobuf:"bytes,1,rep,name=moving_obstacles,json=movingObstacles" json:"moving_obstacles,omitempty"`
	StationaryObstacles []*StationaryObstacle `protobuf:"bytes,2,rep,name=stationary_obstacles,json=stationaryObstacles" json:"stationary_obstacles,omitempty"`
}

func (m *Obstacles) Reset()                    { *m = Obstacles{} }
func (m *Obstacles) String() string            { return proto.CompactTextString(m) }
func (*Obstacles) ProtoMessage()               {}
func (*Obstacles) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Obstacles) GetMovingObstacles() []*MovingObstacle {
	if m != nil {
		return m.MovingObstacles
	}
	return nil
}

func (m *Obstacles) GetStationaryObstacles() []*StationaryObstacle {
	if m != nil {
		return m.StationaryObstacles
	}
	return nil
}

func init() {
	proto.RegisterType((*MovingObstacle)(nil), "interop.MovingObstacle")
	proto.RegisterType((*StationaryObstacle)(nil), "interop.StationaryObstacle")
	proto.RegisterType((*Obstacles)(nil), "interop.Obstacles")
}

func init() { proto.RegisterFile("interop/obstacles.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x49, 0x27, 0xea, 0xce, 0xe6, 0x26, 0x51, 0x58, 0x51, 0x2f, 0xe6, 0xbc, 0x70, 0x57,
	0x15, 0xf4, 0x0d, 0xbc, 0xf2, 0x66, 0x0a, 0xf5, 0x01, 0x4a, 0xb6, 0x86, 0x36, 0x90, 0x26, 0x25,
	0x27, 0x13, 0xf6, 0x1a, 0xbe, 0x80, 0x3e, 0xaa, 0x90, 0xa6, 0xd1, 0xd0, 0x5b, 0x2f, 0xcf, 0x77,
	0x3e, 0x0e, 0x7f, 0xfe, 0xc0, 0x42, 0x28, 0xcb, 0x8d, 0x6e, 0x1f, 0xf4, 0x16, 0x2d, 0xdb, 0x49,
	0x8e, 0x59, 0x6b, 0xb4, 0xd5, 0xf4, 0xc4, 0x2f, 0x56, 0x9f, 0x04, 0x66, 0x1b, 0xfd, 0x21, 0x54,
	0xf5, 0xe6, 0x15, 0x7a, 0x05, 0xa7, 0x92, 0x59, 0x61, 0xf7, 0x25, 0x4f, 0xc9, 0x92, 0xac, 0x93,
	0x3c, 0xcc, 0xf4, 0x06, 0xc6, 0x52, 0xab, 0xaa, 0x5b, 0x26, 0x6e, 0xf9, 0x0b, 0xe8, 0x2d, 0x4c,
	0x99, 0xec, 0xcc, 0xa2, 0x41, 0x99, 0x8e, 0x9c, 0x30, 0xe9, 0xd9, 0x06, 0x25, 0xbd, 0x83, 0x33,
	0x6c, 0x6b, 0x6e, 0x78, 0x61, 0x58, 0x29, 0xf6, 0x98, 0x1e, 0x39, 0x67, 0xda, 0xc1, 0xdc, 0xb1,
	0xd5, 0x37, 0x01, 0xfa, 0x6e, 0x99, 0x15, 0x5a, 0x31, 0x73, 0xf8, 0x87, 0x60, 0xf7, 0x30, 0xdf,
	0x1d, 0xa4, 0x50, 0x25, 0x37, 0x45, 0xcd, 0x45, 0x55, 0x5b, 0x9f, 0x6d, 0xd6, 0xe3, 0x17, 0x47,
	0x23, 0x31, 0x0a, 0x18, 0x44, 0x1f, 0xf1, 0x8b, 0xc0, 0xb8, 0x0f, 0x86, 0xf4, 0x19, 0xce, 0x1b,
	0x57, 0x62, 0x11, 0x8a, 0x4e, 0xc9, 0x72, 0xb4, 0x9e, 0x3c, 0x2e, 0x32, 0xdf, 0x74, 0x16, 0xb7,
	0x9c, 0xcf, 0x9b, 0x68, 0x46, 0xfa, 0x0a, 0x97, 0x18, 0xde, 0xfc, 0xe7, 0x4e, 0xe2, 0xee, 0x5c,
	0x87, 0x3b, 0xc3, 0x62, 0xf2, 0x0b, 0x1c, 0x30, 0xdc, 0x1e, 0xbb, 0x9f, 0x7e, 0xfa, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xca, 0x32, 0x3a, 0x86, 0x04, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interop/service.proto

package interop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Simulation service

type SimulationClient interface {
	StartInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	StopInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	StartSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	StopSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type simulationClient struct {
	cc *grpc.ClientConn
}

func NewSimulationClient(cc *grpc.ClientConn) SimulationClient {
	return &simulationClient{cc}
}

func (c *simulationClient) StartInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.Simulation/StartInteropServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StopInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.Simulation/StopInteropServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StartSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.Simulation/StartSITL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StopSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.Simulation/StopSITL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Simulation service

type SimulationServer interface {
	StartInteropServer(context.Context, *MissionName) (*google_protobuf1.Empty, error)
	StopInteropServer(context.Context, *MissionName) (*google_protobuf1.Empty, error)
	StartSITL(context.Context, *MissionName) (*google_protobuf1.Empty, error)
	StopSITL(context.Context, *MissionName) (*google_protobuf1.Empty, error)
}

func RegisterSimulationServer(s *grpc.Server, srv SimulationServer) {
	s.RegisterService(&_Simulation_serviceDesc, srv)
}

func _Simulation_StartInteropServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StartInteropServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StartInteropServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StartInteropServer(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StopInteropServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StopInteropServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StopInteropServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StopInteropServer(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StartSITL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StartSITL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StartSITL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StartSITL(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StopSITL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StopSITL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StopSITL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StopSITL(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Simulation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.Simulation",
	HandlerType: (*SimulationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartInteropServer",
			Handler:    _Simulation_StartInteropServer_Handler,
		},
		{
			MethodName: "StopInteropServer",
			Handler:    _Simulation_StopInteropServer_Handler,
		},
		{
			MethodName: "StartSITL",
			Handler:    _Simulation_StartSITL_Handler,
		},
		{
			MethodName: "StopSITL",
			Handler:    _Simulation_StopSITL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

// Client API for Interop service

type InteropClient interface {
	// Get active mission
	GetActiveMission(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Mission, error)
	Status(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MissionReportStatus, error)
	GetObstacles(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Obstacles, error)
	StartMission(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type interopClient struct {
	cc *grpc.ClientConn
}

func NewInteropClient(cc *grpc.ClientConn) InteropClient {
	return &interopClient{cc}
}

func (c *interopClient) GetActiveMission(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Mission, error) {
	out := new(Mission)
	err := grpc.Invoke(ctx, "/interop.Interop/GetActiveMission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) Status(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MissionReportStatus, error) {
	out := new(MissionReportStatus)
	err := grpc.Invoke(ctx, "/interop.Interop/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) GetObstacles(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Obstacles, error) {
	out := new(Obstacles)
	err := grpc.Invoke(ctx, "/interop.Interop/GetObstacles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) StartMission(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.Interop/StartMission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interop service

type InteropServer interface {
	// Get active mission
	GetActiveMission(context.Context, *google_protobuf1.Empty) (*Mission, error)
	Status(context.Context, *google_protobuf1.Empty) (*MissionReportStatus, error)
	GetObstacles(context.Context, *google_protobuf1.Empty) (*Obstacles, error)
	StartMission(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterInteropServer(s *grpc.Server, srv InteropServer) {
	s.RegisterService(&_Interop_serviceDesc, srv)
}

func _Interop_GetActiveMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).GetActiveMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/GetActiveMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).GetActiveMission(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).Status(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_GetObstacles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).GetObstacles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/GetObstacles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).GetObstacles(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/StartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).StartMission(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.Interop",
	HandlerType: (*InteropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveMission",
			Handler:    _Interop_GetActiveMission_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Interop_Status_Handler,
		},
		{
			MethodName: "GetObstacles",
			Handler:    _Interop_GetObstacles_Handler,
		},
		{
			MethodName: "StartMission",
			Handler:    _Interop_StartMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

// Client API for MissionEdit service

type MissionEditClient interface {
	GetMissionList(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MissionNameList, error)
	GetMission(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*CompleteMission, error)
	PostMission(ctx context.Context, in *CompleteMission, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type missionEditClient struct {
	cc *grpc.ClientConn
}

func NewMissionEditClient(cc *grpc.ClientConn) MissionEditClient {
	return &missionEditClient{cc}
}

func (c *missionEditClient) GetMissionList(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*MissionNameList, error) {
	out := new(MissionNameList)
	err := grpc.Invoke(ctx, "/interop.MissionEdit/GetMissionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionEditClient) GetMission(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*CompleteMission, error) {
	out := new(CompleteMission)
	err := grpc.Invoke(ctx, "/interop.MissionEdit/GetMission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionEditClient) PostMission(ctx context.Context, in *CompleteMission, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/interop.MissionEdit/PostMission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MissionEdit service

type MissionEditServer interface {
	GetMissionList(context.Context, *google_protobuf1.Empty) (*MissionNameList, error)
	GetMission(context.Context, *MissionName) (*CompleteMission, error)
	PostMission(context.Context, *CompleteMission) (*google_protobuf1.Empty, error)
}

func RegisterMissionEditServer(s *grpc.Server, srv MissionEditServer) {
	s.RegisterService(&_MissionEdit_serviceDesc, srv)
}

func _MissionEdit_GetMissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).GetMissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/GetMissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).GetMissionList(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionEdit_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).GetMission(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionEdit_PostMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).PostMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/PostMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).PostMission(ctx, req.(*CompleteMission))
	}
	return interceptor(ctx, in, info, handler)
}

var _MissionEdit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.MissionEdit",
	HandlerType: (*MissionEditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMissionList",
			Handler:    _MissionEdit_GetMissionList_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _MissionEdit_GetMission_Handler,
		},
		{
			MethodName: "PostMission",
			Handler:    _MissionEdit_PostMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

func init() { proto.RegisterFile("interop/service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0xc7, 0x71, 0x85, 0x56, 0xa7, 0x22, 0xed, 0x69, 0xb7, 0xd5, 0x6c, 0x56, 0x21, 0x7e, 0x20,
	0x0a, 0x09, 0x5d, 0xef, 0xbc, 0x13, 0x29, 0x4b, 0xa1, 0x7e, 0x60, 0x14, 0xe9, 0x95, 0x64, 0xb7,
	0xa7, 0x75, 0x20, 0xc9, 0x0c, 0x33, 0x67, 0x03, 0x22, 0xde, 0xf8, 0x00, 0xde, 0xf8, 0x68, 0xde,
	0x79, 0xed, 0x73, 0x88, 0xcc, 0x64, 0x32, 0x5d, 0x63, 0x07, 0x3f, 0x7a, 0x99, 0x39, 0x99, 0xdf,
	0x6f, 0xe6, 0x9c, 0xff, 0xb0, 0x21, 0xaf, 0x09, 0x95, 0x90, 0x99, 0x46, 0xd5, 0xf0, 0x39, 0xa6,
	0x52, 0x09, 0x12, 0xb0, 0xea, 0x96, 0xa3, 0xf8, 0x44, 0x88, 0x93, 0x12, 0xb3, 0x42, 0xf2, 0xac,
	0xa8, 0x6b, 0x41, 0x05, 0x71, 0x51, 0xeb, 0xf6, 0xb7, 0xc8, 0xef, 0xae, 0xb8, 0xd6, 0x5c, 0xd4,
	0x6e, 0x39, 0xea, 0x2d, 0xbf, 0xc5, 0x23, 0x4e, 0xae, 0x16, 0xf7, 0x6b, 0x0a, 0xa5, 0x50, 0x5d,
	0x75, 0xa7, 0xab, 0x8a, 0x99, 0xa6, 0x62, 0x5e, 0x62, 0x67, 0x1a, 0xb9, 0x73, 0xd8, 0xaf, 0xd9,
	0xe2, 0x38, 0xc3, 0x4a, 0xd2, 0xfb, 0xb6, 0x38, 0xf9, 0x7c, 0x91, 0xb1, 0x9c, 0x57, 0x8b, 0xd2,
	0x1e, 0x0e, 0xde, 0x31, 0xc8, 0xa9, 0x50, 0xb4, 0xdf, 0xb2, 0x72, 0x54, 0x0d, 0x2a, 0xd8, 0x4a,
	0x1d, 0x3b, 0x7d, 0xda, 0x9a, 0x9f, 0x15, 0x15, 0x46, 0xdb, 0x69, 0x0b, 0x4e, 0x3b, 0x70, 0xba,
	0x67, 0xc0, 0xc9, 0xed, 0x4f, 0x5f, 0xbf, 0x7f, 0x19, 0xdc, 0x80, 0x38, 0x6b, 0x76, 0x33, 0xed,
	0xd9, 0x99, 0x6f, 0x97, 0x11, 0xc0, 0x31, 0xdb, 0xc8, 0x49, 0xc8, 0xf3, 0x88, 0x6e, 0x59, 0xd1,
	0x18, 0x46, 0x41, 0x91, 0x90, 0xf0, 0x86, 0x5d, 0xb6, 0x37, 0xca, 0xf7, 0x5f, 0x1d, 0xfc, 0x23,
	0x3f, 0xb6, 0xfc, 0x6d, 0xd8, 0xea, 0xf1, 0xdb, 0x0b, 0xbc, 0x66, 0x97, 0xcc, 0x05, 0xfe, 0x83,
	0x3b, 0xb2, 0xdc, 0x21, 0x6c, 0xfe, 0xc6, 0x15, 0x72, 0xf2, 0x63, 0xc0, 0x56, 0x5d, 0x53, 0xe0,
	0x90, 0xad, 0x4f, 0x91, 0x1e, 0xcf, 0x89, 0x37, 0xe8, 0xc0, 0x10, 0x80, 0x46, 0xeb, 0xfd, 0x23,
	0xfc, 0xaa, 0xe9, 0x45, 0x07, 0x66, 0x6c, 0x25, 0xa7, 0x82, 0x16, 0x3a, 0x08, 0x8c, 0xfb, 0xc0,
	0x97, 0x36, 0x6d, 0xed, 0xae, 0x24, 0xb1, 0xf0, 0x18, 0xa2, 0x33, 0xe0, 0xa6, 0x41, 0x86, 0x7c,
	0xc8, 0xae, 0x4c, 0x91, 0x9e, 0x77, 0x71, 0x0c, 0x9a, 0xc0, 0x9b, 0xfc, 0xbf, 0xc9, 0xd8, 0xf2,
	0x77, 0x60, 0xb8, 0xcc, 0xf7, 0xc9, 0x36, 0x68, 0x3b, 0xd5, 0x3f, 0x75, 0x25, 0x34, 0x82, 0xeb,
	0x16, 0xbf, 0x09, 0x1b, 0xcb, 0x78, 0x3b, 0xd7, 0xc9, 0xb7, 0x01, 0x5b, 0x73, 0xd8, 0xbd, 0x23,
	0x4e, 0xc0, 0xd9, 0xd5, 0x29, 0x76, 0xa2, 0x03, 0xae, 0x29, 0x28, 0xbb, 0x76, 0x56, 0x0a, 0xcc,
	0x8e, 0xe4, 0x8e, 0xd5, 0xdd, 0x84, 0xb1, 0xd1, 0xb9, 0x2e, 0x99, 0x87, 0xed, 0x5f, 0x72, 0x5d,
	0x54, 0xa8, 0xa1, 0x64, 0xec, 0x54, 0x15, 0x08, 0xd5, 0xa9, 0xe4, 0x89, 0xa8, 0x64, 0x89, 0xd4,
	0x25, 0x23, 0x49, 0xad, 0xe4, 0x1e, 0xdc, 0x0d, 0x48, 0xb2, 0x0f, 0xcb, 0xb6, 0x8f, 0xa0, 0xd8,
	0xda, 0x0b, 0xa1, 0xbd, 0x2e, 0x08, 0x0e, 0x36, 0x71, 0xd7, 0x0a, 0x1f, 0x24, 0x7f, 0x29, 0x7c,
	0x74, 0xe1, 0xfe, 0x6c, 0xc5, 0x22, 0x1e, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x59, 0x54, 0x88,
	0xc0, 0x3c, 0x05, 0x00, 0x00,
}

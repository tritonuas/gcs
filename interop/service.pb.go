// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interop/service.proto

package interop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PathPlannerClient is the client API for PathPlanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PathPlannerClient interface {
	GetPathList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionNameList, error)
	GetPath(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*Path, error)
	StartPathPlanner(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*GCSAction, error)
	PlanPath(ctx context.Context, in *Obstacles, opts ...grpc.CallOption) (*Path, error)
	PostPath(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error)
	SendPath(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GCSAction, error)
	GetPathFinal(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Path, error)
}

type pathPlannerClient struct {
	cc *grpc.ClientConn
}

func NewPathPlannerClient(cc *grpc.ClientConn) PathPlannerClient {
	return &pathPlannerClient{cc}
}

func (c *pathPlannerClient) GetPathList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionNameList, error) {
	out := new(MissionNameList)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/GetPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) GetPath(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*Path, error) {
	out := new(Path)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) StartPathPlanner(ctx context.Context, in *Mission, opts ...grpc.CallOption) (*GCSAction, error) {
	out := new(GCSAction)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/StartPathPlanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) PlanPath(ctx context.Context, in *Obstacles, opts ...grpc.CallOption) (*Path, error) {
	out := new(Path)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/PlanPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) PostPath(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/PostPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) SendPath(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GCSAction, error) {
	out := new(GCSAction)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/SendPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathPlannerClient) GetPathFinal(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Path, error) {
	out := new(Path)
	err := c.cc.Invoke(ctx, "/interop.PathPlanner/GetPathFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathPlannerServer is the server API for PathPlanner service.
type PathPlannerServer interface {
	GetPathList(context.Context, *empty.Empty) (*MissionNameList, error)
	GetPath(context.Context, *MissionName) (*Path, error)
	StartPathPlanner(context.Context, *Mission) (*GCSAction, error)
	PlanPath(context.Context, *Obstacles) (*Path, error)
	PostPath(context.Context, *Path) (*empty.Empty, error)
	SendPath(context.Context, *Path) (*GCSAction, error)
	GetPathFinal(context.Context, *empty.Empty) (*Path, error)
}

func RegisterPathPlannerServer(s *grpc.Server, srv PathPlannerServer) {
	s.RegisterService(&_PathPlanner_serviceDesc, srv)
}

func _PathPlanner_GetPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).GetPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/GetPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).GetPathList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).GetPath(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_StartPathPlanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).StartPathPlanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/StartPathPlanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).StartPathPlanner(ctx, req.(*Mission))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_PlanPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Obstacles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).PlanPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/PlanPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).PlanPath(ctx, req.(*Obstacles))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_PostPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).PostPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/PostPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).PostPath(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_SendPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).SendPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/SendPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).SendPath(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathPlanner_GetPathFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathPlannerServer).GetPathFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.PathPlanner/GetPathFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathPlannerServer).GetPathFinal(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PathPlanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.PathPlanner",
	HandlerType: (*PathPlannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPathList",
			Handler:    _PathPlanner_GetPathList_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _PathPlanner_GetPath_Handler,
		},
		{
			MethodName: "StartPathPlanner",
			Handler:    _PathPlanner_StartPathPlanner_Handler,
		},
		{
			MethodName: "PlanPath",
			Handler:    _PathPlanner_PlanPath_Handler,
		},
		{
			MethodName: "PostPath",
			Handler:    _PathPlanner_PostPath_Handler,
		},
		{
			MethodName: "SendPath",
			Handler:    _PathPlanner_SendPath_Handler,
		},
		{
			MethodName: "GetPathFinal",
			Handler:    _PathPlanner_GetPathFinal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

// SimulationClient is the client API for Simulation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimulationClient interface {
	StartInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error)
	StopInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error)
	StartSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error)
	StopSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error)
}

type simulationClient struct {
	cc *grpc.ClientConn
}

func NewSimulationClient(cc *grpc.ClientConn) SimulationClient {
	return &simulationClient{cc}
}

func (c *simulationClient) StartInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.Simulation/StartInteropServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StopInteropServer(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.Simulation/StopInteropServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StartSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.Simulation/StartSITL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) StopSITL(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.Simulation/StopSITL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServer is the server API for Simulation service.
type SimulationServer interface {
	StartInteropServer(context.Context, *MissionName) (*empty.Empty, error)
	StopInteropServer(context.Context, *MissionName) (*empty.Empty, error)
	StartSITL(context.Context, *MissionName) (*empty.Empty, error)
	StopSITL(context.Context, *MissionName) (*empty.Empty, error)
}

func RegisterSimulationServer(s *grpc.Server, srv SimulationServer) {
	s.RegisterService(&_Simulation_serviceDesc, srv)
}

func _Simulation_StartInteropServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StartInteropServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StartInteropServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StartInteropServer(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StopInteropServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StopInteropServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StopInteropServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StopInteropServer(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StartSITL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StartSITL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StartSITL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StartSITL(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_StopSITL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).StopSITL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Simulation/StopSITL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).StopSITL(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Simulation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.Simulation",
	HandlerType: (*SimulationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartInteropServer",
			Handler:    _Simulation_StartInteropServer_Handler,
		},
		{
			MethodName: "StopInteropServer",
			Handler:    _Simulation_StopInteropServer_Handler,
		},
		{
			MethodName: "StartSITL",
			Handler:    _Simulation_StartSITL_Handler,
		},
		{
			MethodName: "StopSITL",
			Handler:    _Simulation_StopSITL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

// InteropClient is the client API for Interop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InteropClient interface {
	// Get active mission
	GetActiveMission(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mission, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionReportStatus, error)
	GetObstacles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Obstacles, error)
	StartMission(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type interopClient struct {
	cc *grpc.ClientConn
}

func NewInteropClient(cc *grpc.ClientConn) InteropClient {
	return &interopClient{cc}
}

func (c *interopClient) GetActiveMission(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Mission, error) {
	out := new(Mission)
	err := c.cc.Invoke(ctx, "/interop.Interop/GetActiveMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionReportStatus, error) {
	out := new(MissionReportStatus)
	err := c.cc.Invoke(ctx, "/interop.Interop/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) GetObstacles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Obstacles, error) {
	out := new(Obstacles)
	err := c.cc.Invoke(ctx, "/interop.Interop/GetObstacles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interopClient) StartMission(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.Interop/StartMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteropServer is the server API for Interop service.
type InteropServer interface {
	// Get active mission
	GetActiveMission(context.Context, *empty.Empty) (*Mission, error)
	Status(context.Context, *empty.Empty) (*MissionReportStatus, error)
	GetObstacles(context.Context, *empty.Empty) (*Obstacles, error)
	StartMission(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterInteropServer(s *grpc.Server, srv InteropServer) {
	s.RegisterService(&_Interop_serviceDesc, srv)
}

func _Interop_GetActiveMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).GetActiveMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/GetActiveMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).GetActiveMission(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_GetObstacles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).GetObstacles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/GetObstacles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).GetObstacles(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interop_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/StartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).StartMission(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.Interop",
	HandlerType: (*InteropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveMission",
			Handler:    _Interop_GetActiveMission_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Interop_Status_Handler,
		},
		{
			MethodName: "GetObstacles",
			Handler:    _Interop_GetObstacles_Handler,
		},
		{
			MethodName: "StartMission",
			Handler:    _Interop_StartMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

// MissionEditClient is the client API for MissionEdit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MissionEditClient interface {
	GetMissionList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionNameList, error)
	GetMission(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*CompleteMission, error)
	PostMission(ctx context.Context, in *CompleteMission, opts ...grpc.CallOption) (*empty.Empty, error)
}

type missionEditClient struct {
	cc *grpc.ClientConn
}

func NewMissionEditClient(cc *grpc.ClientConn) MissionEditClient {
	return &missionEditClient{cc}
}

func (c *missionEditClient) GetMissionList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MissionNameList, error) {
	out := new(MissionNameList)
	err := c.cc.Invoke(ctx, "/interop.MissionEdit/GetMissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionEditClient) GetMission(ctx context.Context, in *MissionName, opts ...grpc.CallOption) (*CompleteMission, error) {
	out := new(CompleteMission)
	err := c.cc.Invoke(ctx, "/interop.MissionEdit/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionEditClient) PostMission(ctx context.Context, in *CompleteMission, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/interop.MissionEdit/PostMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionEditServer is the server API for MissionEdit service.
type MissionEditServer interface {
	GetMissionList(context.Context, *empty.Empty) (*MissionNameList, error)
	GetMission(context.Context, *MissionName) (*CompleteMission, error)
	PostMission(context.Context, *CompleteMission) (*empty.Empty, error)
}

func RegisterMissionEditServer(s *grpc.Server, srv MissionEditServer) {
	s.RegisterService(&_MissionEdit_serviceDesc, srv)
}

func _MissionEdit_GetMissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).GetMissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/GetMissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).GetMissionList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionEdit_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).GetMission(ctx, req.(*MissionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionEdit_PostMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionEditServer).PostMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.MissionEdit/PostMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionEditServer).PostMission(ctx, req.(*CompleteMission))
	}
	return interceptor(ctx, in, info, handler)
}

var _MissionEdit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.MissionEdit",
	HandlerType: (*MissionEditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMissionList",
			Handler:    _MissionEdit_GetMissionList_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _MissionEdit_GetMission_Handler,
		},
		{
			MethodName: "PostMission",
			Handler:    _MissionEdit_PostMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

func init() { proto.RegisterFile("interop/service.proto", fileDescriptor_service_b8889a150ad9df26) }

var fileDescriptor_service_b8889a150ad9df26 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x4f, 0x14, 0x31,
	0x14, 0xc0, 0x03, 0x46, 0x58, 0xbb, 0x6a, 0xe0, 0xf1, 0x4f, 0x66, 0x17, 0xff, 0x14, 0x31, 0x06,
	0x92, 0x19, 0x59, 0x6f, 0xdc, 0x0c, 0xc1, 0x0d, 0x09, 0x2a, 0x71, 0x34, 0x8a, 0x1e, 0x36, 0xdd,
	0xa5, 0x40, 0x93, 0x99, 0xe9, 0x64, 0x5a, 0x36, 0x31, 0x84, 0x8b, 0x1f, 0xc0, 0x8b, 0x5f, 0xc0,
	0xef, 0xe4, 0xcd, 0xb3, 0x9f, 0xc3, 0x98, 0xbe, 0xe9, 0x0c, 0xbb, 0xc3, 0x34, 0x2a, 0xde, 0xe0,
	0x75, 0xfa, 0xfb, 0xb5, 0xef, 0xbd, 0xbe, 0x25, 0x0b, 0x22, 0xd1, 0x3c, 0x93, 0x69, 0xa0, 0x78,
	0x36, 0x14, 0x03, 0xee, 0xa7, 0x99, 0xd4, 0x12, 0xa6, 0x6d, 0xd8, 0x6b, 0x1f, 0x4b, 0x79, 0x1c,
	0xf1, 0x80, 0xa5, 0x22, 0x60, 0x49, 0x22, 0x35, 0xd3, 0x42, 0x26, 0x2a, 0xff, 0xcc, 0x2b, 0x77,
	0xc7, 0x42, 0x29, 0x21, 0x13, 0x1b, 0xf6, 0x2a, 0xe1, 0x1e, 0x3f, 0x14, 0xda, 0xae, 0xb5, 0xab,
	0x6b, 0x19, 0x4f, 0x65, 0x56, 0xac, 0x2e, 0x15, 0xab, 0xb2, 0xaf, 0x34, 0x1b, 0x44, 0xbc, 0x30,
	0xb5, 0xec, 0x39, 0xf0, 0xbf, 0xfe, 0xe9, 0x51, 0xc0, 0xe3, 0x54, 0x7f, 0xb2, 0x8b, 0x50, 0xec,
	0x4a, 0x99, 0x3e, 0xc9, 0x63, 0x9d, 0x6f, 0xd7, 0x49, 0x73, 0x9f, 0xe9, 0x93, 0xfd, 0x88, 0x25,
	0x09, 0xcf, 0x60, 0x40, 0x9a, 0x5d, 0xae, 0x4d, 0x64, 0x4f, 0x28, 0x0d, 0x8b, 0x7e, 0x0e, 0xf4,
	0x0b, 0xa0, 0xbf, 0x63, 0x80, 0xde, 0x1d, 0xdf, 0xb2, 0xfc, 0x17, 0xf9, 0xf9, 0x5e, 0xb2, 0x98,
	0x9b, 0x1d, 0x94, 0x7e, 0xfe, 0xfe, 0xf3, 0xeb, 0x64, 0x1b, 0xbc, 0x60, 0xb8, 0x89, 0xa2, 0x34,
	0x27, 0xe3, 0xdf, 0xbd, 0x84, 0xc5, 0x5c, 0xc1, 0x47, 0x32, 0x6d, 0x25, 0x30, 0x5f, 0x07, 0xf2,
	0x6e, 0x95, 0x51, 0xf3, 0x11, 0xdd, 0x40, 0xe6, 0x1a, 0xac, 0xd6, 0x31, 0x83, 0xb3, 0x22, 0x45,
	0x06, 0x7e, 0x0e, 0x3d, 0x32, 0x13, 0x6a, 0x96, 0xe9, 0xd1, 0x5b, 0xcd, 0x54, 0x2d, 0x1e, 0x94,
	0x91, 0xee, 0x76, 0xf8, 0x6c, 0x60, 0xaa, 0x45, 0xd7, 0x50, 0x73, 0x8f, 0xd6, 0x1e, 0x3d, 0x50,
	0x06, 0xba, 0x35, 0xb1, 0x0e, 0x21, 0x69, 0x18, 0x2e, 0x1e, 0xff, 0x02, 0xf3, 0xaa, 0xa8, 0x44,
	0xf5, 0xf0, 0x0f, 0x91, 0x7a, 0x97, 0x2e, 0x5f, 0xa2, 0x46, 0x2c, 0xe9, 0x99, 0x80, 0x81, 0x0e,
	0x48, 0x63, 0x5f, 0xaa, 0x3c, 0x27, 0xe3, 0x00, 0xcf, 0x51, 0x03, 0xfa, 0x04, 0xc1, 0xeb, 0x74,
	0xad, 0xee, 0xb8, 0x91, 0x1c, 0xb0, 0x28, 0x38, 0x2b, 0x93, 0x7e, 0x6e, 0x24, 0x1f, 0x48, 0x23,
	0xe4, 0xc9, 0x61, 0x9d, 0xa4, 0x2e, 0x1f, 0x36, 0xed, 0xf4, 0x7e, 0x7d, 0xda, 0xc7, 0xd9, 0xef,
	0xc9, 0x4d, 0x5b, 0xd3, 0xe7, 0x22, 0x61, 0x91, 0xb3, 0x73, 0x2a, 0xd9, 0x79, 0x80, 0x8e, 0x16,
	0x2c, 0xd7, 0x39, 0x8e, 0x0c, 0xa9, 0xf3, 0xe5, 0x1a, 0x21, 0xa1, 0x88, 0x4f, 0x23, 0x7c, 0x53,
	0x70, 0x42, 0x00, 0xeb, 0xbb, 0x9b, 0x63, 0x42, 0x9e, 0x0d, 0x79, 0xe6, 0xe8, 0x23, 0x57, 0xea,
	0x6c, 0x4d, 0xa0, 0x6d, 0xac, 0xaa, 0x64, 0x07, 0xe5, 0x2b, 0x37, 0x02, 0x38, 0x22, 0xb3, 0xa1,
	0x96, 0xe9, 0xff, 0x88, 0x56, 0x51, 0xb4, 0x02, 0x2d, 0xa7, 0x48, 0xa6, 0xf0, 0x8e, 0xdc, 0xc0,
	0x1b, 0x85, 0xbb, 0x6f, 0xf6, 0xfe, 0x91, 0xdf, 0x46, 0xfe, 0x22, 0xcc, 0x57, 0xf8, 0xf9, 0x05,
	0xde, 0x92, 0x86, 0xb9, 0xc0, 0x15, 0xb8, 0x2d, 0xe4, 0x2e, 0xc0, 0xdc, 0x25, 0xae, 0x4c, 0x3b,
	0xbf, 0x26, 0xc9, 0xb4, 0x4d, 0x0a, 0x1c, 0x90, 0x99, 0x2e, 0xd7, 0xa6, 0x61, 0x86, 0xdc, 0x82,
	0x9d, 0xa5, 0xbf, 0xf4, 0x0a, 0xc7, 0x35, 0x95, 0x89, 0x07, 0x7d, 0x32, 0x15, 0x6a, 0xa6, 0x4f,
	0x95, 0x13, 0xd8, 0xae, 0x02, 0x5f, 0xe3, 0x90, 0xcc, 0x77, 0x8d, 0x4f, 0xa2, 0x0a, 0xdc, 0x24,
	0xc8, 0x90, 0x0f, 0xb0, 0x6b, 0xcb, 0xb7, 0xeb, 0x34, 0xd5, 0xbc, 0x73, 0xba, 0x82, 0xfc, 0x25,
	0x58, 0x18, 0xe5, 0x97, 0x03, 0xd9, 0xa0, 0xb1, 0xaa, 0x7f, 0xca, 0x8a, 0xab, 0x04, 0xcb, 0x88,
	0x9f, 0x83, 0xd9, 0x51, 0x3c, 0xd6, 0xb5, 0xf3, 0x63, 0x92, 0x34, 0x2d, 0x76, 0xe7, 0x50, 0x68,
	0x10, 0xe4, 0x76, 0x97, 0x17, 0xa2, 0x2b, 0xce, 0x6d, 0x3b, 0xfc, 0x60, 0xc5, 0xe8, 0x6c, 0x96,
	0xcc, 0xef, 0x51, 0x30, 0x3a, 0x5d, 0x15, 0x44, 0x84, 0x5c, 0xa8, 0x1c, 0x4d, 0x75, 0x21, 0xd9,
	0x96, 0x71, 0x1a, 0x71, 0x5d, 0x74, 0x06, 0xf5, 0x51, 0xf2, 0x18, 0x1e, 0x39, 0x24, 0xd5, 0x59,
	0x9e, 0x91, 0xa6, 0x99, 0x8a, 0x85, 0xce, 0x09, 0x76, 0x26, 0x71, 0x13, 0x85, 0x1b, 0xf4, 0x2f,
	0x85, 0x5b, 0x13, 0xeb, 0xfd, 0x29, 0x44, 0x3c, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x83,
	0x2f, 0x8c, 0xf3, 0x07, 0x00, 0x00,
}
